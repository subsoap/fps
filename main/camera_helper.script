function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_FOCUS_LOST then
		print("window.WINDOW_EVENT_FOCUS_LOST")
		self.window_focus = false
		defos.set_cursor_visible(true)
	elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
		print("window.WINDOW_EVENT_FOCUS_GAINED")
		self.window_focus = true
		defos.set_cursor_visible(false)
		defos.move_cursor_to(self.view_width/2, self.view_height/2)
	elseif event == window.WINDOW_EVENT_RESIZED then
		print("Window resized: ", data.width, data.height)
		local _, _, w, h = defos.get_view_size()
		self.view_width = w
		self.view_height = h
	end
end

function update_cursor(self)
	if self.window_focus == false then return end

	local speed_mod = 1.2
	-- these should probably be based on screen size ratio?
	local yaw_speed = 0.05 * speed_mod
	local pitch_speed = 0.025 * speed_mod
	local max_speed = 999999

	-- dx and dy has to be calculated here, we can't use the values given by on_input
	-- using action.x and action.y from on_input seems to be okay though
	
	-- doing floor / ceil seems to fix drift?
	local dx = self.cursor_x - math.floor(self.cursor_x_last_frame)
	local dy = self.cursor_y - math.ceil(self.cursor_y_last_frame)
	--print(self.cursor_x, math.floor(self.cursor_x_last_frame), self.cursor_y, math.ceil(self.cursor_y_last_frame))
	--[[ this needs to be fixed properly 
	print(self.cursor_x, self.cursor_x_last_frame) -- sometimes with certain window sizes even with mouse pos static it's different!?
	
	if math.abs(dx) <= 1 then dx = 0 end
	
	if math.abs(dy) <= 1 then dy = 0 end
	--]]
	--print(dx, dy)
	
	self.cursor_x_last_frame = self.view_width/2
	self.cursor_y_last_frame = self.view_height/2


	if dx > 0 then
		self.yaw = self.yaw + math.min(dx, max_speed) * -1 * yaw_speed / 10
	elseif dx < 0 then
		self.yaw = self.yaw + math.max(dx, -max_speed) * -1 * yaw_speed / 10
	end

	if dy > 0 then
		self.pitch = self.pitch + math.min(dy, max_speed) * pitch_speed / 10
	elseif dy < 0 then
		self.pitch = self.pitch + math.max(dy, -max_speed) * pitch_speed / 10
	end		
	
end

local function jump(self)
	self.velocity.y = self.jump_takeoff_speed
	if self.position.z == self.position_floor then
		self.velocity.y = self.jump_takeoff_speed
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.1
	end
end

local function update_jump(self)
	
end

function init(self)
	defos.set_view_size(nil, nil, 960, 640)
	defos.toggle_fullscreen()



	self.jumping = false
	self.jump_takeoff_speed = 400
	self.velocity = vmath.vector3(0,0,0)
	self.gravity = -800
	
	--defos.set_maximized(true)
	
	local _, _, w, h = defos.get_view_size()
	self.view_width = w
	self.view_height = h
		
	--defos.set_cursor_locked(true)

	defos.set_cursor_visible(false)
	window.set_listener(window_callback)
	self.window_focus = true
	msg.post(".", "acquire_input_focus")
	self.camera = go.get_id("/camera")
	self.position = go.get_position(self.camera)
	self.position_actual = go.get_position(self.camera)
	self.position_floor = self.position.y
	self.rotation = go.get_rotation()
	self.target_rotation = go.get_rotation()
	self.pitch = 0
	self.yaw = 0
	self.roll = 0

	self.move_forward = false
	self.move_back = false
	self.move_left = false
	self.move_right = false
	
	self.cursor_x = 0
	self.cursor_y = 0
	self.cursor_x_last_frame = 0
	self.cursor_y_last_frame = 0

	self.movement_timer = 0
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	update_jump(self)

	local acceleration = vmath.vector3(0, self.gravity, 0)
	local dv = acceleration * dt

	local v0 = self.velocity
	--v0.y = math.max(v0.y, -1080) -- max downward velocity
	self.velocity = self.velocity + dv
	local dp = (v0 + self.velocity) * dt * 0.5
	--pprint(dp)
	self.position = self.position + dp

	if self.position.y < self.position_floor then
		self.position.y = self.position_floor
		self.velocity.y = 0
	end

	--print(self.position.y, self.velocity.y)
	
	if self.moving == true then
		self.movement_timer = math.min(self.movement_timer + dt * 4, 1.0)
	else
		self.movement_timer = 0
	end
	self.movement_speed = vmath.lerp(self.movement_timer, 3.5, 5)

	--print(self.movement_speed)
	
	local filter_amount = 0.2
	
	
	update_cursor(self)
	
	if self.window_focus == true then
		defos.move_cursor_to(self.view_width/2, self.view_height/2)
	end

	--print(self.pitch)

	--print(self.pitch, self.yaw)
	if self.pitch > 1.2 then self.pitch = 1.2 end
	if self.pitch < -1.2 then self.pitch = -1.2 end


	-- I need to wrap yaw but currently I'm using it incorrectly below so it messes up the rotation

	self.quat_pitch = vmath.quat_axis_angle(vmath.vector3(1,0,0), self.pitch)-- * dt * 100 )
	self.quat_yaw = vmath.quat_axis_angle(vmath.vector3(0,1,0), self.yaw)-- * dt * 100 )
	self.quat_roll = vmath.quat_axis_angle(vmath.vector3(0,0,1), self.roll)-- * dt * 100 )
	if self.orientation == nil then self.orientation = vmath.normalize(self.quat_yaw * self.quat_pitch) end
	
	self.orientation = vmath.slerp(filter_amount, vmath.normalize(self.quat_yaw * self.quat_pitch), self.orientation)

	go.set_rotation(self.orientation, self.camera)

	self.movement = vmath.vector3()
	if self.move_forward then
		self.movement = vmath.normalize(self.movement + vmath.normalize(vmath.vector3(math.sin(self.yaw  ), 0, math.cos(self.yaw ))))
	end
	if self.move_back then
		self.movement = vmath.normalize(self.movement - vmath.normalize(vmath.vector3(math.sin(self.yaw  ), 0, math.cos(self.yaw ))))
	end	
	if self.move_left then
		local vec = vmath.normalize(vmath.vector3(math.sin(self.yaw  ), 0, math.cos(self.yaw )))
		--pprint(vec)
		local new_vec = vmath.rotate(vmath.quat_rotation_y(math.pi/2), vec)
		self.movement = vmath.normalize(self.movement + new_vec)
	end
	if self.move_right then
		local vec = vmath.normalize(vmath.vector3(math.sin(self.yaw  ), 0, math.cos(self.yaw )))
		--pprint(vec)
		local new_vec = vmath.rotate(vmath.quat_rotation_y(-math.pi/2), vec)
		self.movement = vmath.normalize(self.movement + new_vec)
	end	

	-- how is this sometimes being set to nan?
	-- the below is a check to make it won't become nan
	if ((self.position - self.movement * self.movement_speed).x) == ((self.position - self.movement * self.movement_speed).x) then
		self.position = self.position - self.movement * self.movement_speed
	end

	self.position_actual = vmath.lerp(0.15, self.position_actual, self.position)
	
	go.set_position(self.position_actual, self.camera)

	--pprint(self.movement)
	--pprint(self.position)

	self.move_forward = false
	self.move_back = false
	self.move_left = false
	self.move_right = false	
	self.moving = false
	self.key_space = false
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)

	if action_id == hash("key_space") and action.pressed then
		--print("jump")
		jump(self)		
	elseif action.released then
		abort_jump(self)
		--print("abort jump")
	end

	if action_id == hash("key_w") then 
		self.move_forward = true
		self.moving = true
	end
	if action_id == hash("key_a") then 
		self.move_left = true 
		self.moving = true
	end
	if action_id == hash("key_s") then 
		self.move_back = true 
		self.moving = true
	end
	if action_id == hash("key_d") then 
		self.move_right = true 
		self.moving = true
	end

	if action_id == hash("key_f11") and action.released then
		defos.toggle_fullscreen()
	end

	--pprint(action)
	if action_id == hash("key_esc") then
		msg.post("@system:", "exit", {code = 0})
	end

	----[[
	if action.x ~= nil then self.cursor_x = action.screen_x end
	if action.y ~= nil then self.cursor_y = action.screen_y end
	--]]


end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
